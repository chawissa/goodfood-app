"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector(".pagination"));
  }

  _generateMarkup() {
    const currentPage = this._data.page;
    const numOfPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);
    console.log(numOfPages);
    const previousButton = `
      <button class="btn--inline pagination__btn--prev">
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-left"></use>
        </svg>
        <span>Page ${currentPage - 1}</span>
       </button>
    `;
    const nextButton = `
      <button class="btn--inline pagination__btn--next">
        <span>Page ${currentPage + 1}</span>
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </button>
    `; // Page 1 and there are other pages

    if (currentPage === 1 && numOfPages > 1) {
      return nextButton;
    } // Last page


    if (currentPage === numOfPages && numOfPages > 1) {
      return previousButton;
    } // Other page


    if (this._data.page < numOfPages) {
      return `
        <button class="btn--inline pagination__btn--prev">
          <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-left"></use>
          </svg>
          <span>Page ${currentPage - 1}</span>
        </button>
        <button class="btn--inline pagination__btn--next">
          <span>Page ${currentPage + 1}</span>
          <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-right"></use>
          </svg>
        </button>
      `;
    } // Page 1 and there are no other pages


    return "";
  }

}

var _default = new PaginationView();

exports.default = _default;